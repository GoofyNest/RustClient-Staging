public sealed class ConstraintCollection : InternalDataCollectionBase // TypeDefIndex: 4175
{
	private readonly DataTable _table; 
	private readonly ArrayList _list; 
	private int _defaultNameIndex; 
	private CollectionChangeEventHandler _onCollectionChanged; 
	private Constraint[] _delayLoadingConstraints; 
	private bool _fLoadForeignKeyConstraintsOnly; 

protected override ArrayList List { get; }
public Constraint Item { get; }
internal DataTable Table { get; }
public Constraint Item { get; }


internal void .ctor(DataTable table) { }

protected override ArrayList get_List() { }

public Constraint get_Item(int index) { }

internal DataTable get_Table() { }

public Constraint get_Item(string name) { }

public void Add(Constraint constraint) { }

internal void Add(Constraint constraint, bool addUniqueWhenAddingForeign) { }

public Constraint Add(string name, DataColumn[] columns, bool primaryKey) { }

private void AddUniqueConstraint(UniqueConstraint constraint) { }

private void AddForeignKeyConstraint(ForeignKeyConstraint constraint) { }

private bool AutoGenerated(Constraint constraint) { }

private void ArrayAdd(Constraint constraint) { }

private void ArrayRemove(Constraint constraint) { }

internal string AssignName() { }

private void BaseAdd(Constraint constraint) { }

private void BaseGroupSwitch(Constraint[] oldArray, int oldLength, Constraint[] newArray, int newLength) { }

private void BaseRemove(Constraint constraint) { }

internal bool CanRemove(Constraint constraint, bool fThrowException) { }

public void Clear() { }

public bool Contains(string name) { }

internal bool Contains(string name, bool caseSensitive) { }

internal Constraint FindConstraint(Constraint constraint) { }

internal UniqueConstraint FindKeyConstraint(DataColumn[] columns) { }

internal UniqueConstraint FindKeyConstraint(DataColumn column) { }

internal ForeignKeyConstraint FindForeignKeyConstraint(DataColumn[] parentColumns, DataColumn[] childColumns) { }

private static bool CompareArrays(DataColumn[] a1, DataColumn[] a2) { }

internal int InternalIndexOf(string constraintName) { }

private string MakeName(int index) { }

private void OnCollectionChanged(CollectionChangeEventArgs ccevent) { }

internal void RegisterName(string name) { }

public void Remove(Constraint constraint) { }

internal void UnregisterName(string name) { }

}

