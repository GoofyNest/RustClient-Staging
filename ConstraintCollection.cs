public sealed class ConstraintCollection : InternalDataCollectionBase // TypeDefIndex: 4175
{	// Fields
	private readonly DataTable _table; // 0x10
	private readonly ArrayList _list; // 0x18
	private int _defaultNameIndex; // 0x20
	private CollectionChangeEventHandler _onCollectionChanged; // 0x28
	private Constraint[] _delayLoadingConstraints; // 0x30
	private bool _fLoadForeignKeyConstraintsOnly; // 0x38

	// Properties
	protected override ArrayList List { get; }
	public Constraint Item { get; }
	internal DataTable Table { get; }
	public Constraint Item { get; }

	// Methods

	// RVA: 0x1228C70 Offset: 0x1227270 VA: 0x181228C70
	internal void .ctor(DataTable table) { }

	// RVA: 0x49A880 Offset: 0x498E80 VA: 0x18049A880 Slot: 11
	protected override ArrayList get_List() { }

	// RVA: 0x1228E30 Offset: 0x1227430 VA: 0x181228E30
	public Constraint get_Item(int index) { }

	// RVA: 0x4BC5D0 Offset: 0x4BABD0 VA: 0x1804BC5D0
	internal DataTable get_Table() { }

	// RVA: 0x1228D20 Offset: 0x1227320 VA: 0x181228D20
	public Constraint get_Item(string name) { }

	// RVA: 0x1226560 Offset: 0x1224B60 VA: 0x181226560
	public void Add(Constraint constraint) { }

	// RVA: 0x1226620 Offset: 0x1224C20 VA: 0x181226620
	internal void Add(Constraint constraint, bool addUniqueWhenAddingForeign) { }

	// RVA: 0x1226570 Offset: 0x1224B70 VA: 0x181226570
	public Constraint Add(string name, DataColumn[] columns, bool primaryKey) { }

	// RVA: 0x1226460 Offset: 0x1224A60 VA: 0x181226460
	private void AddUniqueConstraint(UniqueConstraint constraint) { }

	// RVA: 0x12263D0 Offset: 0x12249D0 VA: 0x1812263D0
	private void AddForeignKeyConstraint(ForeignKeyConstraint constraint) { }

	// RVA: 0x1226FD0 Offset: 0x12255D0 VA: 0x181226FD0
	private bool AutoGenerated(Constraint constraint) { }

	// RVA: 0x1226F30 Offset: 0x1225530 VA: 0x181226F30
	private void ArrayAdd(Constraint constraint) { }

	// RVA: 0x1226F70 Offset: 0x1225570 VA: 0x181226F70
	private void ArrayRemove(Constraint constraint) { }

	// RVA: 0x1226FB0 Offset: 0x12255B0 VA: 0x181226FB0
	internal string AssignName() { }

	// RVA: 0x12270A0 Offset: 0x12256A0 VA: 0x1812270A0
	private void BaseAdd(Constraint constraint) { }

	// RVA: 0x1227190 Offset: 0x1225790 VA: 0x181227190
	private void BaseGroupSwitch(Constraint[] oldArray, int oldLength, Constraint[] newArray, int newLength) { }

	// RVA: 0x12273E0 Offset: 0x12259E0 VA: 0x1812273E0
	private void BaseRemove(Constraint constraint) { }

	// RVA: 0x1227760 Offset: 0x1225D60 VA: 0x181227760
	internal bool CanRemove(Constraint constraint, bool fThrowException) { }

	// RVA: 0x1227790 Offset: 0x1225D90 VA: 0x181227790
	public void Clear() { }

	// RVA: 0x1227D40 Offset: 0x1226340 VA: 0x181227D40
	public bool Contains(string name) { }

	// RVA: 0x1227D60 Offset: 0x1226360 VA: 0x181227D60
	internal bool Contains(string name, bool caseSensitive) { }

	// RVA: 0x1227ED0 Offset: 0x12264D0 VA: 0x181227ED0
	internal Constraint FindConstraint(Constraint constraint) { }

	// RVA: 0x1228250 Offset: 0x1226850 VA: 0x181228250
	internal UniqueConstraint FindKeyConstraint(DataColumn[] columns) { }

	// RVA: 0x1228390 Offset: 0x1226990 VA: 0x181228390
	internal UniqueConstraint FindKeyConstraint(DataColumn column) { }

	// RVA: 0x12280F0 Offset: 0x12266F0 VA: 0x1812280F0
	internal ForeignKeyConstraint FindForeignKeyConstraint(DataColumn[] parentColumns, DataColumn[] childColumns) { }

	// RVA: 0x1227C90 Offset: 0x1226290 VA: 0x181227C90
	private static bool CompareArrays(DataColumn[] a1, DataColumn[] a2) { }

	// RVA: 0x12284C0 Offset: 0x1226AC0 VA: 0x1812284C0
	internal int InternalIndexOf(string constraintName) { }

	// RVA: 0x1228660 Offset: 0x1226C60 VA: 0x181228660
	private string MakeName(int index) { }

	// RVA: 0xE67EB0 Offset: 0xE664B0 VA: 0x180E67EB0
	private void OnCollectionChanged(CollectionChangeEventArgs ccevent) { }

	// RVA: 0x12286F0 Offset: 0x1226CF0 VA: 0x1812286F0
	internal void RegisterName(string name) { }

	// RVA: 0x1228970 Offset: 0x1226F70 VA: 0x181228970
	public void Remove(Constraint constraint) { }

	// RVA: 0x1228B60 Offset: 0x1227160 VA: 0x181228B60
	internal void UnregisterName(string name) { }

}

